{
	"name": "lest.Mock",
	"description": "Class representing mocked functions.",
	"fields": [
		{
			"name": "mock",
			"description": [
				"Data relating to the mocked function such as call arguments and return values.",
				"You shouldn't need to access this directly. Instead, a range of mock function matchers are provided as abstractions."
			],
			"type": "table",
			"fields": [
				{
					"name": "calls",
					"description": "Array of calls, where each call is an array of the arguments that were passed to the mock function.",
					"type": "array",
					"items": {
						"type": "array",
						"items": "any"
					}
				},
				{
					"name": "lastCall",
					"description": "Array of arguments that the mock function was last called with, or `nil` if it hasn't been called.",
					"type": "array",
					"items": "any",
					"optional": true
				},
				{
					"name": "results",
					"description": "Array of results that the mock function has returned or thrown.",
					"type": "array",
					"items": "lest.MockResult"
				},
				{
					"name": "lastResult",
					"description": "The result that the mock function last returned or threw, or `nil` if it hasn't been called.",
					"type": "lest.MockResult",
					"optional": true
				}
			]
		},
		{
			"name": "mockName",
			"type": "function",
			"description": "Sets the name that will be used for the mock in test output (or other prints).",
			"parameters": [
				{
					"name": "name",
					"type": "string"
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "getMockName",
			"type": "function",
			"description": "Gets the name that will be used for the mock in test output (or other prints).",
			"returns": [
				{
					"type": "string"
				}
			]
		},
		{
			"name": "mockImplementation",
			"type": "function",
			"description": [
				"Mocks the function's implementation.",
				"This is the same as passing a function to `lest.fn()`, and will override any function that was passed there.",
				"",
				"If you've pushed a one-time implementation with `mockImplementationOnce`, then this function will not override it.",
				"This is because the persistent implementation is a fallback and stored separately."
			],
			"parameters": [
				{
					"name": "fn",
					"type": "function",
					"parameters": [
						{
							"name": "...",
							"type": "any"
						}
					],
					"returns": [
						{
							"type": "any"
						}
					]
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "getMockImplementation",
			"type": "function",
			"description": [
				"Gets the mock function's implementation.",
				"This is the function that's called whenever the mock is called.",
				"",
				"If you've pushed a one-time implementation with `mockImplementationOnce`,",
				"then this function will still return the persistent implementation.",
				"This is because the persistent implementation is a fallback and stored separately."
			],
			"returns": [
				{
					"type": "function",
					"parameters": [
						{
							"name": "...",
							"type": "any"
						}
					],
					"returns": [
						{
							"type": "any"
						}
					]
				}
			]
		},
		{
			"name": "mockImplementationOnce",
			"type": "function",
			"description": [
				"Mocks the function's implementation for one call.",
				"The one-time implementations will be consumed in the order they were given (first in, first out).",
				"",
				"`getMockImplementation` will still return the persistent implementation regardless of any one-time implementations pushed.",
				"This is because the persistent implementation is a fallback and stored separately."
			],
			"parameters": [
				{
					"name": "fn",
					"type": "function",
					"parameters": [
						{
							"name": "...",
							"type": "any"
						}
					],
					"returns": [
						{
							"type": "any"
						}
					]
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "mockReturnValue",
			"type": "function",
			"description": [
				"Mocks the function's return value.",
				"This is shorthand for `mockFn:mockImplementation(function() return ... end)`",
				"",
				"See `mockImplementation`'s documentation for more information."
			],
			"parameters": [
				{
					"name": "...",
					"type": "any"
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "mockReturnValueOnce",
			"type": "function",
			"description": [
				"Mocks the function's return value for a single call.",
				"This is shorthand for `mockFn:mockImplementationOnce(function() return ... end)`",
				"",
				"See `mockImplementationOnce`'s documentation for more information."
			],
			"parameters": [
				{
					"name": "...",
					"type": "any"
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "mockReturnThis",
			"type": "function",
			"description": [
				"Mocks the function's implementation to return `self`.",
				"This is shorthand for `mockFn:mockImplementation(function(self) return self end)`",
				"",
				"This is useful for mocking functions that chain.",
				"See `mockImplementation`'s documentation for more information."
			],
			"parameters": [
				{
					"name": "...",
					"type": "any"
				}
			],
			"returns": [
				{
					"type": "self"
				}
			]
		},
		{
			"name": "mockClear",
			"type": "function",
			"description": [
				"Clears all information stored in the `mockFn.mock` table (calls and results).",
				"",
				"Note that this replaces `mockFn.mock`, not its contents.",
				"Make sure you're not storing a stale reference to the old table.",
				"",
				"To also reset mocked implementations and return values, call `mockFn:mockReset()`."
			]
		},
		{
			"name": "mockReset",
			"type": "function",
			"description": [
				"Clears all information stored in the `mockFn.mock` table (calls and results) _and_ removes all mocked implementations and return values.",
				"",
				"Note that this replaces `mockFn.mock`, not its contents.",
				"Make sure you're not storing a stale reference to the old table.",
				"",
				"To only reset the calls and results of the mock, use `mockFn:mockClear()` instead."
			]
		}
	]
}
